void visit(int u, int p)
{
    int NumChild = 0;
    
    Low[u] = Num[u] = ++Time;
    
    for (int v : a[u])
        if (v != p) 
        {
            if (Num[v] != 0) Low[u] = min(Low[u], Num[v]);
            else 
            {
                visit(v, u);
                
                NumChild++;
                Low[u] = min(Low[u], Low[v]);

                if (Low[v] >= Num[v]) CriticalEdge++;

                if (u == p) 
                {
                    if (NumChild >= 2) CriticalNode[u] = true;
                } else  if (Low[v] >= Num[u]) CriticalNode[u] = true;
            }
        }
}

void solve()
{
for (int i = 1; i <= n; i++)
        if (!Num[i]) visit(i, i);

    int Count = 0;
    for (int i = 1; i <= n; i++)
        if (CriticalNode[i]) Count++;
        
    // Cầu : Count
    // Khớp : CriticalEdge
}
