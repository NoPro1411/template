const int logn = ?

// build(root, par)
void build(int i, int p)
{
	d[i] = d[p] + 1;

	dp[i][0] = p;

	for (int k = 1; k < logn; ++k) dp[i][k] = dp[dp[i][k - 1]][k - 1];

	for (int v : Edge[i])
		if (v != p) build(v, i);
}

int LCA(int u, int v)
{
	if (d[u] < d[v]) swap(u, v);

	for (int i = logn - 1; i >= 0; --i)
		if (d[dp[u][i]] >= d[v]) u = dp[u][i];

	if (u == v) return u;

	for (int i = logn - 1; i >= 0; --i)
		if (dp[u][i] != dp[v][i]) u = dp[u][i], v = dp[v][i];

	return dp[u][0];
}
