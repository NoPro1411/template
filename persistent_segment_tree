
struct Node
{
	int left, right, val;
	
	Node() {}
	Node(int val, int left, int right) : val(val), left(left), right(right) {}
} it[17 * maxn];

int build(int l, int r)
{
	if (l == r)
	{
		++nNode;
		//it[nNode] = Node(a[l], 0, 0);
		return nNode;
	}

	int mid = (l + r) >> 1;
	int cur = ++nNode;

	it[cur].left = build(l, mid);
	it[cur].right = build(mid + 1, r);
	
  //it[cur].val = max(it[it[cur].left].val, it[it[cur].right].val);

	return cur;
}

int update(int idx, int l, int r, int u, int x)
{
	if (l == r)
	{
		++nNode;
		//it[nNode] = Node(x, 0, 0);
		return nNode;
	}

	int mid = (l + r) >> 1;

	int cur = ++nNode;

	if (u <= mid)
	{
		it[cur].left = update(it[idx].left, l, mid, u, x);
		it[cur].right = it[idx].right;
	}
	else
	{
		it[cur].left = it[idx].left;
		it[cur].right = update(it[idx].right, mid + 1, r, u, x);
	}

	//it[cur].val = max(it[it[cur].left].val, it[it[cur].right].val);

	return cur;
}

int get(int idx, int l, int r, int u, int v)
{
	if (l > v || r < u) return -1; // all a[i] > 0

	if (u <= l && r <= v) return it[idx].val;

	int mid = (l + r) >> 1;

	//return max(get(it[idx].left, l, mid, u, v), get(it[idx].right, mid + 1, r, u, v));
}

/*
  update : ++nVer;
           ver[nVer] = update(1, n, u, x, ver[nVer-1]);
           
  get : get(ver[t], 1, n, u, v);
*/
